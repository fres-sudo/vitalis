import {
  DEV
} from "./chunk-PLGELRID.js";
import {
  run_all
} from "./chunk-YAAWISDD.js";

// node_modules/.pnpm/svelte@5.0.0-next.164/node_modules/svelte/src/constants.js
var EACH_ITEM_REACTIVE = 1;
var EACH_INDEX_REACTIVE = 1 << 1;
var EACH_KEYED = 1 << 2;
var EACH_IS_CONTROLLED = 1 << 3;
var EACH_IS_ANIMATED = 1 << 4;
var EACH_IS_STRICT_EQUALS = 1 << 6;
var PROPS_IS_IMMUTABLE = 1;
var PROPS_IS_RUNES = 1 << 1;
var PROPS_IS_UPDATED = 1 << 2;
var PROPS_IS_LAZY_INITIAL = 1 << 3;
var TRANSITION_IN = 1;
var TRANSITION_OUT = 1 << 1;
var TRANSITION_GLOBAL = 1 << 2;
var TEMPLATE_FRAGMENT = 1;
var TEMPLATE_USE_IMPORT_NODE = 1 << 1;
var HYDRATION_START = "[";
var HYDRATION_END = "]";
var HYDRATION_ANCHOR = "";
var HYDRATION_END_ELSE = `${HYDRATION_END}!`;
var HYDRATION_ERROR = {};
var ELEMENT_IS_NAMESPACED = 1;
var ELEMENT_PRESERVE_ATTRIBUTE_CASE = 1 << 1;
var UNINITIALIZED = Symbol();
var RawTextElements = ["textarea", "script", "style", "title"];
var DelegatedEvents = [
  "beforeinput",
  "click",
  "change",
  "dblclick",
  "contextmenu",
  "focusin",
  "focusout",
  "input",
  "keydown",
  "keyup",
  "mousedown",
  "mousemove",
  "mouseout",
  "mouseover",
  "mouseup",
  "pointerdown",
  "pointermove",
  "pointerout",
  "pointerover",
  "pointerup",
  "touchend",
  "touchmove",
  "touchstart"
];
var PassiveDelegatedEvents = ["touchstart", "touchmove", "touchend"];
var AttributeAliases = {
  // no `class: 'className'` because we handle that separately
  formnovalidate: "formNoValidate",
  ismap: "isMap",
  nomodule: "noModule",
  playsinline: "playsInline",
  readonly: "readOnly"
};
var DOMBooleanAttributes = [
  "allowfullscreen",
  "async",
  "autofocus",
  "autoplay",
  "checked",
  "controls",
  "default",
  "disabled",
  "formnovalidate",
  "hidden",
  "indeterminate",
  "ismap",
  "loop",
  "multiple",
  "muted",
  "nomodule",
  "novalidate",
  "open",
  "playsinline",
  "readonly",
  "required",
  "reversed",
  "seamless",
  "selected",
  "webkitdirectory"
];
var namespace_svg = "http://www.w3.org/2000/svg";
var interactive_elements = /* @__PURE__ */ new Set([
  "a",
  "button",
  "iframe",
  "embed",
  "select",
  "textarea"
]);
var disallowed_paragraph_contents = [
  "address",
  "article",
  "aside",
  "blockquote",
  "details",
  "div",
  "dl",
  "fieldset",
  "figcapture",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "header",
  "hr",
  "menu",
  "nav",
  "ol",
  "pre",
  "section",
  "table",
  "ul",
  "p"
];
var implied_end_tags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
function is_tag_valid_with_parent(tag, parent_tag) {
  switch (parent_tag) {
    case "select":
      return tag === "option" || tag === "optgroup" || tag === "#text" || tag === "hr" || tag === "script" || tag === "template";
    case "optgroup":
      return tag === "option" || tag === "#text";
    case "option":
      return tag === "#text";
    case "tr":
      return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
    case "tbody":
    case "thead":
    case "tfoot":
      return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
    case "colgroup":
      return tag === "col" || tag === "template";
    case "table":
      return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
    case "head":
      return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
    case "html":
      return tag === "head" || tag === "body" || tag === "frameset";
    case "frameset":
      return tag === "frame";
    case "#document":
      return tag === "html";
  }
  switch (tag) {
    case "h1":
    case "h2":
    case "h3":
    case "h4":
    case "h5":
    case "h6":
      return parent_tag !== "h1" && parent_tag !== "h2" && parent_tag !== "h3" && parent_tag !== "h4" && parent_tag !== "h5" && parent_tag !== "h6";
    case "rp":
    case "rt":
      return implied_end_tags.indexOf(parent_tag) === -1;
    case "body":
    case "caption":
    case "col":
    case "colgroup":
    case "frameset":
    case "frame":
    case "head":
    case "html":
    case "tbody":
    case "td":
    case "tfoot":
    case "th":
    case "thead":
    case "tr":
      return parent_tag == null;
  }
  return true;
}
function is_capture_event(name, mode = "exclude-on") {
  if (!name.endsWith("capture")) {
    return false;
  }
  return mode == "exclude-on" ? name !== "gotpointercapture" && name !== "lostpointercapture" : name !== "ongotpointercapture" && name !== "onlostpointercapture";
}

// node_modules/.pnpm/svelte@5.0.0-next.164/node_modules/svelte/src/internal/client/utils.js
var is_array = Array.isArray;
var array_from = Array.from;
var object_keys = Object.keys;
var is_frozen = Object.isFrozen;
var object_freeze = Object.freeze;
var define_property = Object.defineProperty;
var get_descriptor = Object.getOwnPropertyDescriptor;
var get_descriptors = Object.getOwnPropertyDescriptors;
var object_prototype = Object.prototype;
var array_prototype = Array.prototype;
var get_prototype_of = Object.getPrototypeOf;
var map_prototype = Map.prototype;
var map_set_method = map_prototype.set;
var map_get_method = map_prototype.get;
function map_set(map, key, value) {
  map_set_method.call(map, key, value);
}
function map_get(map, key) {
  return map_get_method.call(map, key);
}
function is_function(thing) {
  return typeof thing === "function";
}

// node_modules/.pnpm/svelte@5.0.0-next.164/node_modules/svelte/src/internal/client/constants.js
var DERIVED = 1 << 1;
var EFFECT = 1 << 2;
var RENDER_EFFECT = 1 << 3;
var BLOCK_EFFECT = 1 << 4;
var BRANCH_EFFECT = 1 << 5;
var ROOT_EFFECT = 1 << 6;
var UNOWNED = 1 << 7;
var DISCONNECTED = 1 << 8;
var CLEAN = 1 << 9;
var DIRTY = 1 << 10;
var MAYBE_DIRTY = 1 << 11;
var INERT = 1 << 12;
var DESTROYED = 1 << 13;
var EFFECT_RAN = 1 << 14;
var EFFECT_TRANSPARENT = 1 << 15;
var LEGACY_DERIVED_PROP = 1 << 16;
var INSPECT_EFFECT = 1 << 17;
var STATE_SYMBOL = Symbol("$state");
var STATE_FROZEN_SYMBOL = Symbol("$state.frozen");
var LOADING_ATTR_SYMBOL = Symbol("");

// node_modules/.pnpm/svelte@5.0.0-next.164/node_modules/svelte/src/internal/client/reactivity/equality.js
function equals(value) {
  return value === this.v;
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || a !== null && typeof a === "object" || typeof a === "function";
}
function safe_equals(value) {
  return !safe_not_equal(value, this.v);
}

// node_modules/.pnpm/svelte@5.0.0-next.164/node_modules/svelte/src/internal/client/errors.js
function bind_invalid_checkbox_value() {
  if (DEV) {
    const error = new Error(`bind_invalid_checkbox_value
Using \`bind:value\` together with a checkbox input is not allowed. Use \`bind:checked\` instead`);
    error.name = "Svelte error";
    throw error;
  } else {
    throw new Error("bind_invalid_checkbox_value");
  }
}
function bind_invalid_export(component, key, name) {
  if (DEV) {
    const error = new Error(`bind_invalid_export
Component ${component} has an export named \`${key}\` that a consumer component is trying to access using \`bind:${key}\`, which is disallowed. Instead, use \`bind:this\` (e.g. \`<${name} bind:this={component} />\`) and then access the property on the bound component instance (e.g. \`component.${key}\`)`);
    error.name = "Svelte error";
    throw error;
  } else {
    throw new Error("bind_invalid_export");
  }
}
function bind_not_bindable(key, component, name) {
  if (DEV) {
    const error = new Error(`bind_not_bindable
A component is attempting to bind to a non-bindable property \`${key}\` belonging to ${component} (i.e. \`<${name} bind:${key}={...}>\`). To mark a property as bindable: \`let { ${key} = $bindable() } = $props()\``);
    error.name = "Svelte error";
    throw error;
  } else {
    throw new Error("bind_not_bindable");
  }
}
function component_api_changed(parent, method, component) {
  if (DEV) {
    const error = new Error(`component_api_changed
${parent} called \`${method}\` on an instance of ${component}, which is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information`);
    error.name = "Svelte error";
    throw error;
  } else {
    throw new Error("component_api_changed");
  }
}
function component_api_invalid_new(component, name) {
  if (DEV) {
    const error = new Error(`component_api_invalid_new
Attempted to instantiate ${component} with \`new ${name}\`, which is no longer valid in Svelte 5. If this component is not under your control, set the \`legacy.componentApi\` compiler option to keep it working. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information`);
    error.name = "Svelte error";
    throw error;
  } else {
    throw new Error("component_api_invalid_new");
  }
}
function each_key_duplicate(a, b, value) {
  if (DEV) {
    const error = new Error(`each_key_duplicate
${value ? `Keyed each block has duplicate key \`${value}\` at indexes ${a} and ${b}` : `Keyed each block has duplicate key at indexes ${a} and ${b}`}`);
    error.name = "Svelte error";
    throw error;
  } else {
    throw new Error("each_key_duplicate");
  }
}
function effect_in_teardown(rune) {
  if (DEV) {
    const error = new Error(`effect_in_teardown
\`${rune}\` cannot be used inside an effect cleanup function`);
    error.name = "Svelte error";
    throw error;
  } else {
    throw new Error("effect_in_teardown");
  }
}
function effect_in_unowned_derived() {
  if (DEV) {
    const error = new Error(`effect_in_unowned_derived
Effect cannot be created inside a \`$derived\` value that was not itself created inside an effect`);
    error.name = "Svelte error";
    throw error;
  } else {
    throw new Error("effect_in_unowned_derived");
  }
}
function effect_orphan(rune) {
  if (DEV) {
    const error = new Error(`effect_orphan
\`${rune}\` can only be used inside an effect (e.g. during component initialisation)`);
    error.name = "Svelte error";
    throw error;
  } else {
    throw new Error("effect_orphan");
  }
}
function effect_update_depth_exceeded() {
  if (DEV) {
    const error = new Error(`effect_update_depth_exceeded
Maximum update depth exceeded. This can happen when a reactive block or effect repeatedly sets a new value. Svelte limits the number of nested updates to prevent infinite loops`);
    error.name = "Svelte error";
    throw error;
  } else {
    throw new Error("effect_update_depth_exceeded");
  }
}
function hydration_failed() {
  if (DEV) {
    const error = new Error(`hydration_failed
Failed to hydrate the application`);
    error.name = "Svelte error";
    throw error;
  } else {
    throw new Error("hydration_failed");
  }
}
function lifecycle_legacy_only(name) {
  if (DEV) {
    const error = new Error(`lifecycle_legacy_only
\`${name}(...)\` cannot be used in runes mode`);
    error.name = "Svelte error";
    throw error;
  } else {
    throw new Error("lifecycle_legacy_only");
  }
}
function props_invalid_value(key) {
  if (DEV) {
    const error = new Error(`props_invalid_value
Cannot do \`bind:${key}={undefined}\` when \`${key}\` has a fallback value`);
    error.name = "Svelte error";
    throw error;
  } else {
    throw new Error("props_invalid_value");
  }
}
function props_rest_readonly(property) {
  if (DEV) {
    const error = new Error(`props_rest_readonly
Rest element properties of \`$props()\` such as \`${property}\` are readonly`);
    error.name = "Svelte error";
    throw error;
  } else {
    throw new Error("props_rest_readonly");
  }
}
function rune_outside_svelte(rune) {
  if (DEV) {
    const error = new Error(`rune_outside_svelte
The \`${rune}\` rune is only available inside \`.svelte\` and \`.svelte.js/ts\` files`);
    error.name = "Svelte error";
    throw error;
  } else {
    throw new Error("rune_outside_svelte");
  }
}
function state_prototype_fixed() {
  if (DEV) {
    const error = new Error(`state_prototype_fixed
Cannot set prototype of \`$state\` object`);
    error.name = "Svelte error";
    throw error;
  } else {
    throw new Error("state_prototype_fixed");
  }
}
function state_unsafe_mutation() {
  if (DEV) {
    const error = new Error(`state_unsafe_mutation
Updating state inside a derived is forbidden. If the value should not be reactive, declare it without \`$state\``);
    error.name = "Svelte error";
    throw error;
  } else {
    throw new Error("state_unsafe_mutation");
  }
}
function svelte_component_invalid_this_value() {
  if (DEV) {
    const error = new Error(`svelte_component_invalid_this_value
The \`this={...}\` property of a \`<svelte:component>\` must be a Svelte component, if defined`);
    error.name = "Svelte error";
    throw error;
  } else {
    throw new Error("svelte_component_invalid_this_value");
  }
}

// node_modules/.pnpm/svelte@5.0.0-next.164/node_modules/svelte/src/internal/client/reactivity/sources.js
function source(v) {
  return {
    f: 0,
    // TODO ideally we could skip this altogether, but it causes type errors
    v,
    reactions: null,
    equals,
    version: 0
  };
}
function mutable_source(initial_value) {
  var _a;
  const s = source(initial_value);
  s.equals = safe_equals;
  if (current_component_context !== null && current_component_context.l !== null) {
    ((_a = current_component_context.l).s ?? (_a.s = [])).push(s);
  }
  return s;
}
function mutate(source2, value) {
  set(
    source2,
    untrack(() => get(source2))
  );
  return value;
}
function set(source2, value) {
  var initialized = source2.v !== UNINITIALIZED;
  if (initialized && current_reaction !== null && is_runes() && (current_reaction.f & DERIVED) !== 0) {
    state_unsafe_mutation();
  }
  if (!source2.equals(value)) {
    source2.v = value;
    source2.version = increment_version();
    mark_reactions(source2, DIRTY, true);
    if (is_runes() && initialized && current_effect !== null && (current_effect.f & CLEAN) !== 0 && (current_effect.f & BRANCH_EFFECT) === 0) {
      if (current_dependencies !== null && current_dependencies.includes(source2)) {
        set_signal_status(current_effect, DIRTY);
        schedule_effect(current_effect);
      } else {
        if (current_untracked_writes === null) {
          set_current_untracked_writes([source2]);
        } else {
          current_untracked_writes.push(source2);
        }
      }
    }
    if (DEV) {
      for (const effect2 of inspect_effects) {
        execute_effect(effect2);
      }
      inspect_effects.clear();
    }
  }
  return value;
}

// node_modules/.pnpm/svelte@5.0.0-next.164/node_modules/svelte/src/internal/client/proxy.js
function proxy(value, immutable = true, parent = null, prev) {
  var _a, _b;
  if (typeof value === "object" && value != null && !is_frozen(value) && !(STATE_FROZEN_SYMBOL in value)) {
    if (STATE_SYMBOL in value) {
      const metadata = (
        /** @type {import('#client').ProxyMetadata<T>} */
        value[STATE_SYMBOL]
      );
      if (metadata.t === value || metadata.p === value) {
        if (DEV) {
          widen_ownership(metadata, metadata);
          metadata.parent = parent;
        }
        return metadata.p;
      }
    }
    const prototype = get_prototype_of(value);
    if (prototype === object_prototype || prototype === array_prototype) {
      const proxy2 = new Proxy(value, state_proxy_handler);
      define_property(value, STATE_SYMBOL, {
        value: (
          /** @type {import('#client').ProxyMetadata} */
          {
            s: /* @__PURE__ */ new Map(),
            v: source(0),
            a: is_array(value),
            i: immutable,
            p: proxy2,
            t: value
          }
        ),
        writable: true,
        enumerable: false
      });
      if (DEV) {
        value[STATE_SYMBOL].parent = parent;
        if (prev) {
          const prev_owners = (_b = (_a = prev == null ? void 0 : prev.v) == null ? void 0 : _a[STATE_SYMBOL]) == null ? void 0 : _b.owners;
          value[STATE_SYMBOL].owners = prev_owners ? new Set(prev_owners) : null;
        } else {
          value[STATE_SYMBOL].owners = parent === null ? current_component_context !== null ? /* @__PURE__ */ new Set([current_component_context.function]) : null : /* @__PURE__ */ new Set();
        }
      }
      return proxy2;
    }
  }
  return value;
}
function unwrap(value, already_unwrapped) {
  if (typeof value === "object" && value != null && STATE_SYMBOL in value) {
    const unwrapped = already_unwrapped.get(value);
    if (unwrapped !== void 0) {
      return unwrapped;
    }
    if (is_array(value)) {
      const array = [];
      already_unwrapped.set(value, array);
      for (const element of value) {
        array.push(unwrap(element, already_unwrapped));
      }
      return array;
    } else {
      const obj = {};
      const keys = Reflect.ownKeys(value);
      const descriptors = get_descriptors(value);
      already_unwrapped.set(value, obj);
      for (const key of keys) {
        if (key === STATE_SYMBOL) continue;
        if (descriptors[key].get) {
          define_property(obj, key, descriptors[key]);
        } else {
          const property = value[key];
          obj[key] = unwrap(property, already_unwrapped);
        }
      }
      return obj;
    }
  }
  return value;
}
function snapshot(value) {
  return (
    /** @type {T} */
    unwrap(
      /** @type {import('#client').ProxyStateObject} */
      value,
      /* @__PURE__ */ new Map()
    )
  );
}
function update_version(signal, d = 1) {
  set(signal, signal.v + d);
}
var state_proxy_handler = {
  defineProperty(target, prop, descriptor) {
    if (descriptor.value) {
      const metadata = target[STATE_SYMBOL];
      const s = metadata.s.get(prop);
      if (s !== void 0) set(s, proxy(descriptor.value, metadata.i, metadata));
    }
    return Reflect.defineProperty(target, prop, descriptor);
  },
  deleteProperty(target, prop) {
    const metadata = target[STATE_SYMBOL];
    const s = metadata.s.get(prop);
    const is_array2 = metadata.a;
    const boolean = delete target[prop];
    if (is_array2 && boolean) {
      const ls = metadata.s.get("length");
      const length = target.length - 1;
      if (ls !== void 0 && ls.v !== length) {
        set(ls, length);
      }
    }
    if (s !== void 0) set(s, UNINITIALIZED);
    if (boolean) {
      update_version(metadata.v);
    }
    return boolean;
  },
  get(target, prop, receiver) {
    var _a;
    if (prop === STATE_SYMBOL) {
      return Reflect.get(target, STATE_SYMBOL);
    }
    const metadata = target[STATE_SYMBOL];
    let s = metadata.s.get(prop);
    if (s === void 0 && (!(prop in target) || ((_a = get_descriptor(target, prop)) == null ? void 0 : _a.writable))) {
      s = (metadata.i ? source : mutable_source)(proxy(target[prop], metadata.i, metadata));
      metadata.s.set(prop, s);
    }
    if (s !== void 0) {
      const value = get(s);
      return value === UNINITIALIZED ? void 0 : value;
    }
    return Reflect.get(target, prop, receiver);
  },
  getOwnPropertyDescriptor(target, prop) {
    const descriptor = Reflect.getOwnPropertyDescriptor(target, prop);
    if (descriptor && "value" in descriptor) {
      const metadata = target[STATE_SYMBOL];
      const s = metadata.s.get(prop);
      if (s) {
        descriptor.value = get(s);
      }
    }
    return descriptor;
  },
  has(target, prop) {
    var _a;
    if (prop === STATE_SYMBOL) {
      return true;
    }
    const metadata = target[STATE_SYMBOL];
    const has = Reflect.has(target, prop);
    let s = metadata.s.get(prop);
    if (s !== void 0 || current_effect !== null && (!has || ((_a = get_descriptor(target, prop)) == null ? void 0 : _a.writable))) {
      if (s === void 0) {
        s = (metadata.i ? source : mutable_source)(
          has ? proxy(target[prop], metadata.i, metadata) : UNINITIALIZED
        );
        metadata.s.set(prop, s);
      }
      const value = get(s);
      if (value === UNINITIALIZED) {
        return false;
      }
    }
    return has;
  },
  set(target, prop, value, receiver) {
    const metadata = target[STATE_SYMBOL];
    let s = metadata.s.get(prop);
    if (s === void 0) {
      untrack(() => receiver[prop]);
      s = metadata.s.get(prop);
    }
    if (s !== void 0) {
      set(s, proxy(value, metadata.i, metadata));
    }
    const is_array2 = metadata.a;
    const not_has = !(prop in target);
    if (DEV) {
      const prop_metadata = value == null ? void 0 : value[STATE_SYMBOL];
      if (prop_metadata && (prop_metadata == null ? void 0 : prop_metadata.parent) !== metadata) {
        widen_ownership(metadata, prop_metadata);
      }
      check_ownership(metadata);
    }
    if (is_array2 && prop === "length") {
      for (let i = value; i < target.length; i += 1) {
        const s2 = metadata.s.get(i + "");
        if (s2 !== void 0) set(s2, UNINITIALIZED);
      }
    }
    target[prop] = value;
    if (not_has) {
      if (is_array2) {
        const ls = metadata.s.get("length");
        const length = target.length;
        if (ls !== void 0 && ls.v !== length) {
          set(ls, length);
        }
      }
      update_version(metadata.v);
    }
    return true;
  },
  ownKeys(target) {
    const metadata = target[STATE_SYMBOL];
    get(metadata.v);
    return Reflect.ownKeys(target);
  }
};
if (DEV) {
  state_proxy_handler.setPrototypeOf = () => {
    state_prototype_fixed();
  };
}
function get_proxied_value(value) {
  if (value !== null && typeof value === "object" && STATE_SYMBOL in value) {
    var metadata = value[STATE_SYMBOL];
    if (metadata) {
      return metadata.p;
    }
  }
  return value;
}
function is(a, b) {
  return Object.is(get_proxied_value(a), get_proxied_value(b));
}

// node_modules/.pnpm/svelte@5.0.0-next.164/node_modules/svelte/src/internal/client/dom/task.js
var request_idle_callback = typeof requestIdleCallback === "undefined" ? (cb) => setTimeout(cb, 1) : requestIdleCallback;
var is_micro_task_queued = false;
var is_idle_task_queued = false;
var current_queued_micro_tasks = [];
var current_queued_idle_tasks = [];
function process_micro_tasks() {
  is_micro_task_queued = false;
  const tasks = current_queued_micro_tasks.slice();
  current_queued_micro_tasks = [];
  run_all(tasks);
}
function process_idle_tasks() {
  is_idle_task_queued = false;
  const tasks = current_queued_idle_tasks.slice();
  current_queued_idle_tasks = [];
  run_all(tasks);
}
function queue_micro_task(fn) {
  if (!is_micro_task_queued) {
    is_micro_task_queued = true;
    queueMicrotask(process_micro_tasks);
  }
  current_queued_micro_tasks.push(fn);
}
function queue_idle_task(fn) {
  if (!is_idle_task_queued) {
    is_idle_task_queued = true;
    request_idle_callback(process_idle_tasks);
  }
  current_queued_idle_tasks.push(fn);
}
function flush_tasks() {
  if (is_micro_task_queued) {
    process_micro_tasks();
  }
  if (is_idle_task_queued) {
    process_idle_tasks();
  }
}

// node_modules/.pnpm/svelte@5.0.0-next.164/node_modules/svelte/src/internal/client/reactivity/deriveds.js
var updating_derived = false;
function derived(fn) {
  let flags = DERIVED | DIRTY;
  if (current_effect === null) flags |= UNOWNED;
  const signal = {
    deps: null,
    deriveds: null,
    equals,
    f: flags,
    first: null,
    fn,
    last: null,
    reactions: null,
    v: (
      /** @type {V} */
      null
    ),
    version: 0
  };
  if (current_reaction !== null && (current_reaction.f & DERIVED) !== 0) {
    var current_derived = (
      /** @type {import('#client').Derived<V>} */
      current_reaction
    );
    if (current_derived.deriveds === null) {
      current_derived.deriveds = [signal];
    } else {
      current_derived.deriveds.push(signal);
    }
  }
  return signal;
}
function derived_safe_equal(fn) {
  const signal = derived(fn);
  signal.equals = safe_equals;
  return signal;
}
function destroy_derived_children(signal) {
  destroy_effect_children(signal);
  var deriveds = signal.deriveds;
  if (deriveds !== null) {
    signal.deriveds = null;
    for (var i = 0; i < deriveds.length; i += 1) {
      destroy_derived(deriveds[i]);
    }
  }
}
function update_derived(derived2) {
  var previous_updating_derived = updating_derived;
  updating_derived = true;
  destroy_derived_children(derived2);
  var value = execute_reaction_fn(derived2);
  updating_derived = previous_updating_derived;
  var status = (current_skip_reaction || (derived2.f & UNOWNED) !== 0) && derived2.deps !== null ? MAYBE_DIRTY : CLEAN;
  set_signal_status(derived2, status);
  if (!derived2.equals(value)) {
    derived2.v = value;
    derived2.version = increment_version();
    mark_reactions(derived2, DIRTY, false);
  }
}
function destroy_derived(signal) {
  destroy_derived_children(signal);
  remove_reactions(signal, 0);
  set_signal_status(signal, DESTROYED);
  signal.first = signal.last = signal.deps = signal.reactions = // @ts-expect-error `signal.fn` cannot be `null` while the signal is alive
  signal.fn = null;
}

// node_modules/.pnpm/svelte@5.0.0-next.164/node_modules/svelte/src/internal/shared/errors.js
function lifecycle_outside_component(name) {
  if (DEV) {
    const error = new Error(`lifecycle_outside_component
\`${name}(...)\` can only be used during component initialisation`);
    error.name = "Svelte error";
    throw error;
  } else {
    throw new Error("lifecycle_outside_component");
  }
}
function render_tag_invalid_argument() {
  if (DEV) {
    const error = new Error(`render_tag_invalid_argument
The argument to \`{@render ...}\` must be a snippet function, not a component or some other kind of function. If you want to dynamically render one snippet or another, use \`$derived\` and pass its result to \`{@render ...}\``);
    error.name = "Svelte error";
    throw error;
  } else {
    throw new Error("render_tag_invalid_argument");
  }
}
function snippet_used_as_component() {
  if (DEV) {
    const error = new Error(`snippet_used_as_component
A snippet must be rendered with \`{@render ...}\``);
    error.name = "Svelte error";
    throw error;
  } else {
    throw new Error("snippet_used_as_component");
  }
}
function store_invalid_shape(name) {
  if (DEV) {
    const error = new Error(`store_invalid_shape
\`${name}\` is not a store with a \`subscribe\` method`);
    error.name = "Svelte error";
    throw error;
  } else {
    throw new Error("store_invalid_shape");
  }
}
function svelte_element_invalid_this_value() {
  if (DEV) {
    const error = new Error(`svelte_element_invalid_this_value
The \`this\` prop on \`<svelte:element>\` must be a string, if defined`);
    error.name = "Svelte error";
    throw error;
  } else {
    throw new Error("svelte_element_invalid_this_value");
  }
}

// node_modules/.pnpm/svelte@5.0.0-next.164/node_modules/svelte/src/internal/client/runtime.js
var FLUSH_MICROTASK = 0;
var FLUSH_SYNC = 1;
var handled_errors = /* @__PURE__ */ new WeakSet();
var current_scheduler_mode = FLUSH_MICROTASK;
var is_micro_task_queued2 = false;
var is_flushing_effect = false;
var is_destroying_effect = false;
function set_is_flushing_effect(value) {
  is_flushing_effect = value;
}
function set_is_destroying_effect(value) {
  is_destroying_effect = value;
}
var inspect_effects = /* @__PURE__ */ new Set();
var current_queued_root_effects = [];
var flush_count = 0;
var current_reaction = null;
function set_current_reaction(reaction) {
  current_reaction = reaction;
}
var current_effect = null;
function set_current_effect(effect2) {
  current_effect = effect2;
}
var current_dependencies = null;
var current_dependencies_index = 0;
var current_untracked_writes = null;
function set_current_untracked_writes(value) {
  current_untracked_writes = value;
}
var current_version = 0;
var current_skip_reaction = false;
var is_signals_recorded = false;
var captured_signals = /* @__PURE__ */ new Set();
var current_component_context = null;
function set_current_component_context(context) {
  current_component_context = context;
}
var dev_current_component_function = null;
function set_dev_current_component_function(fn) {
  dev_current_component_function = fn;
}
function increment_version() {
  return current_version++;
}
function is_runes() {
  return current_component_context !== null && current_component_context.l === null;
}
function check_dirtiness(reaction) {
  var _a;
  var flags = reaction.f;
  var is_dirty = (flags & DIRTY) !== 0;
  if (is_dirty) {
    return true;
  }
  var is_unowned = (flags & UNOWNED) !== 0;
  var is_disconnected = (flags & DISCONNECTED) !== 0;
  if ((flags & MAYBE_DIRTY) !== 0) {
    var dependencies = reaction.deps;
    if (dependencies !== null) {
      var length = dependencies.length;
      var reactions;
      for (var i = 0; i < length; i++) {
        var dependency = dependencies[i];
        if (!is_dirty && check_dirtiness(
          /** @type {import('#client').Derived} */
          dependency
        )) {
          update_derived(
            /** @type {import('#client').Derived} **/
            dependency
          );
        }
        var version = dependency.version;
        if (is_unowned) {
          if (version > /** @type {import('#client').Derived} */
          reaction.version) {
            return true;
          }
          if (!current_skip_reaction && !((_a = dependency == null ? void 0 : dependency.reactions) == null ? void 0 : _a.includes(reaction))) {
            (dependency.reactions ?? (dependency.reactions = [])).push(reaction);
          }
        } else if ((reaction.f & DIRTY) !== 0) {
          return true;
        } else if (is_disconnected) {
          if (version > /** @type {import('#client').Derived} */
          reaction.version) {
            is_dirty = true;
          }
          reactions = dependency.reactions;
          if (reactions === null) {
            dependency.reactions = [reaction];
          } else if (!reactions.includes(reaction)) {
            reactions.push(reaction);
          }
        }
      }
    }
    if (!is_unowned) {
      set_signal_status(reaction, CLEAN);
    }
    if (is_disconnected) {
      reaction.f ^= DISCONNECTED;
    }
  }
  return is_dirty;
}
function handle_error(error, effect2, component_context) {
  var _a, _b;
  if (!DEV || handled_errors.has(error) || component_context === null) {
    throw error;
  }
  const component_stack = [];
  const effect_name = (_a = effect2.fn) == null ? void 0 : _a.name;
  if (effect_name) {
    component_stack.push(effect_name);
  }
  let current_context = component_context;
  while (current_context !== null) {
    var filename = (_b = current_context.function) == null ? void 0 : _b.filename;
    if (filename) {
      const file = filename.split("/").at(-1);
      component_stack.push(file);
    }
    current_context = current_context.p;
  }
  const indent = /Firefox/.test(navigator.userAgent) ? "  " : "	";
  define_property(error, "message", {
    value: error.message + `
${component_stack.map((name) => `
${indent}in ${name}`).join("")}
`
  });
  const stack = error.stack;
  if (stack) {
    const lines = stack.split("\n");
    const new_lines = [];
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      if (line.includes("svelte/src/internal")) {
        continue;
      }
      new_lines.push(line);
    }
    define_property(error, "stack", {
      value: error.stack + new_lines.join("\n")
    });
  }
  handled_errors.add(error);
  throw error;
}
function execute_reaction_fn(signal) {
  const previous_dependencies = current_dependencies;
  const previous_dependencies_index = current_dependencies_index;
  const previous_untracked_writes = current_untracked_writes;
  const previous_reaction = current_reaction;
  const previous_skip_reaction = current_skip_reaction;
  current_dependencies = /** @type {null | import('#client').Value[]} */
  null;
  current_dependencies_index = 0;
  current_untracked_writes = null;
  current_reaction = (signal.f & (BRANCH_EFFECT | ROOT_EFFECT)) === 0 ? signal : null;
  current_skip_reaction = !is_flushing_effect && (signal.f & UNOWNED) !== 0;
  try {
    let res = (
      /** @type {Function} */
      (0, signal.fn)()
    );
    let dependencies = (
      /** @type {import('#client').Value<unknown>[]} **/
      signal.deps
    );
    if (current_dependencies !== null) {
      let i;
      if (dependencies !== null) {
        const deps_length = dependencies.length;
        const full_current_dependencies = current_dependencies_index === 0 ? current_dependencies : dependencies.slice(0, current_dependencies_index).concat(current_dependencies);
        const current_dep_length = full_current_dependencies.length;
        const full_current_dependencies_set = current_dep_length > 16 && deps_length - current_dependencies_index > 1 ? new Set(full_current_dependencies) : null;
        for (i = current_dependencies_index; i < deps_length; i++) {
          const dependency = dependencies[i];
          if (full_current_dependencies_set !== null ? !full_current_dependencies_set.has(dependency) : !full_current_dependencies.includes(dependency)) {
            remove_reaction(signal, dependency);
          }
        }
      }
      if (dependencies !== null && current_dependencies_index > 0) {
        dependencies.length = current_dependencies_index + current_dependencies.length;
        for (i = 0; i < current_dependencies.length; i++) {
          dependencies[current_dependencies_index + i] = current_dependencies[i];
        }
      } else {
        signal.deps = /** @type {import('#client').Value<V>[]} **/
        dependencies = current_dependencies;
      }
      if (!current_skip_reaction) {
        for (i = current_dependencies_index; i < dependencies.length; i++) {
          const dependency = dependencies[i];
          const reactions = dependency.reactions;
          if (reactions === null) {
            dependency.reactions = [signal];
          } else if (reactions[reactions.length - 1] !== signal && !reactions.includes(signal)) {
            reactions.push(signal);
          }
        }
      }
    } else if (dependencies !== null && current_dependencies_index < dependencies.length) {
      remove_reactions(signal, current_dependencies_index);
      dependencies.length = current_dependencies_index;
    }
    return res;
  } finally {
    current_dependencies = previous_dependencies;
    current_dependencies_index = previous_dependencies_index;
    current_untracked_writes = previous_untracked_writes;
    current_reaction = previous_reaction;
    current_skip_reaction = previous_skip_reaction;
  }
}
function remove_reaction(signal, dependency) {
  const reactions = dependency.reactions;
  let reactions_length = 0;
  if (reactions !== null) {
    reactions_length = reactions.length - 1;
    const index = reactions.indexOf(signal);
    if (index !== -1) {
      if (reactions_length === 0) {
        dependency.reactions = null;
      } else {
        reactions[index] = reactions[reactions_length];
        reactions.pop();
      }
    }
  }
  if (reactions_length === 0 && (dependency.f & DERIVED) !== 0) {
    set_signal_status(dependency, MAYBE_DIRTY);
    if ((dependency.f & (UNOWNED | DISCONNECTED)) === 0) {
      dependency.f ^= DISCONNECTED;
    }
    remove_reactions(
      /** @type {import('#client').Derived} **/
      dependency,
      0
    );
  }
}
function remove_reactions(signal, start_index) {
  const dependencies = signal.deps;
  if (dependencies !== null) {
    const active_dependencies = start_index === 0 ? null : dependencies.slice(0, start_index);
    let i;
    for (i = start_index; i < dependencies.length; i++) {
      const dependency = dependencies[i];
      if (active_dependencies === null || !active_dependencies.includes(dependency)) {
        remove_reaction(signal, dependency);
      }
    }
  }
}
function destroy_effect_children(signal, remove_dom = true) {
  let effect2 = signal.first;
  signal.first = null;
  signal.last = null;
  var sibling;
  while (effect2 !== null) {
    sibling = effect2.next;
    destroy_effect(effect2, remove_dom);
    effect2 = sibling;
  }
}
function execute_effect(effect2) {
  var flags = effect2.f;
  if ((flags & DESTROYED) !== 0) {
    return;
  }
  set_signal_status(effect2, CLEAN);
  var component_context = effect2.ctx;
  var previous_effect = current_effect;
  var previous_component_context = current_component_context;
  current_effect = effect2;
  current_component_context = component_context;
  if (DEV) {
    var previous_component_fn = dev_current_component_function;
    dev_current_component_function = effect2.component_function;
  }
  try {
    if ((flags & BLOCK_EFFECT) === 0) {
      destroy_effect_children(effect2);
    }
    execute_effect_teardown(effect2);
    var teardown2 = execute_reaction_fn(effect2);
    effect2.teardown = typeof teardown2 === "function" ? teardown2 : null;
  } catch (error) {
    handle_error(
      /** @type {Error} */
      error,
      effect2,
      current_component_context
    );
  } finally {
    current_effect = previous_effect;
    current_component_context = previous_component_context;
    if (DEV) {
      dev_current_component_function = previous_component_fn;
    }
  }
}
function infinite_loop_guard() {
  if (flush_count > 1e3) {
    flush_count = 0;
    effect_update_depth_exceeded();
  }
  flush_count++;
}
function flush_queued_root_effects(root_effects) {
  var length = root_effects.length;
  if (length === 0) {
    return;
  }
  infinite_loop_guard();
  var previously_flushing_effect = is_flushing_effect;
  is_flushing_effect = true;
  try {
    for (var i = 0; i < length; i++) {
      var effect2 = root_effects[i];
      if (effect2.first === null && (effect2.f & BRANCH_EFFECT) === 0) {
        flush_queued_effects([effect2]);
      } else {
        var collected_effects = [];
        process_effects(effect2, collected_effects);
        flush_queued_effects(collected_effects);
      }
    }
  } finally {
    is_flushing_effect = previously_flushing_effect;
  }
}
function flush_queued_effects(effects) {
  var length = effects.length;
  if (length === 0) return;
  for (var i = 0; i < length; i++) {
    var effect2 = effects[i];
    if ((effect2.f & (DESTROYED | INERT)) === 0 && check_dirtiness(effect2)) {
      execute_effect(effect2);
      if (effect2.deps === null && effect2.first === null && effect2.dom === null) {
        if (effect2.teardown === null) {
          unlink_effect(effect2);
        } else {
          effect2.fn = null;
        }
      }
    }
  }
}
function process_deferred() {
  is_micro_task_queued2 = false;
  if (flush_count > 1001) {
    return;
  }
  const previous_queued_root_effects = current_queued_root_effects;
  current_queued_root_effects = [];
  flush_queued_root_effects(previous_queued_root_effects);
  if (!is_micro_task_queued2) {
    flush_count = 0;
  }
}
function schedule_effect(signal) {
  if (current_scheduler_mode === FLUSH_MICROTASK) {
    if (!is_micro_task_queued2) {
      is_micro_task_queued2 = true;
      queueMicrotask(process_deferred);
    }
  }
  var effect2 = signal;
  while (effect2.parent !== null) {
    effect2 = effect2.parent;
    var flags = effect2.f;
    if ((flags & BRANCH_EFFECT) !== 0) {
      if ((flags & CLEAN) === 0) return;
      set_signal_status(effect2, MAYBE_DIRTY);
    }
  }
  current_queued_root_effects.push(effect2);
}
function process_effects(effect2, collected_effects) {
  var current_effect2 = effect2.first;
  var effects = [];
  main_loop: while (current_effect2 !== null) {
    var flags = current_effect2.f;
    var is_active = (flags & (DESTROYED | INERT)) === 0;
    var is_branch = flags & BRANCH_EFFECT;
    var is_clean = (flags & CLEAN) !== 0;
    var child = current_effect2.first;
    if (is_active && (!is_branch || !is_clean)) {
      if (is_branch) {
        set_signal_status(current_effect2, CLEAN);
      }
      if ((flags & RENDER_EFFECT) !== 0) {
        if (!is_branch && check_dirtiness(current_effect2)) {
          execute_effect(current_effect2);
          child = current_effect2.first;
        }
        if (child !== null) {
          current_effect2 = child;
          continue;
        }
      } else if ((flags & EFFECT) !== 0) {
        if (is_branch || is_clean) {
          if (child !== null) {
            current_effect2 = child;
            continue;
          }
        } else {
          effects.push(current_effect2);
        }
      }
    }
    var sibling = current_effect2.next;
    if (sibling === null) {
      let parent = current_effect2.parent;
      while (parent !== null) {
        if (effect2 === parent) {
          break main_loop;
        }
        var parent_sibling = parent.next;
        if (parent_sibling !== null) {
          current_effect2 = parent_sibling;
          continue main_loop;
        }
        parent = parent.parent;
      }
    }
    current_effect2 = sibling;
  }
  for (var i = 0; i < effects.length; i++) {
    child = effects[i];
    collected_effects.push(child);
    process_effects(child, collected_effects);
  }
}
function flush_sync(fn, flush_previous = true) {
  var previous_scheduler_mode = current_scheduler_mode;
  var previous_queued_root_effects = current_queued_root_effects;
  try {
    infinite_loop_guard();
    const root_effects = [];
    current_scheduler_mode = FLUSH_SYNC;
    current_queued_root_effects = root_effects;
    is_micro_task_queued2 = false;
    if (flush_previous) {
      flush_queued_root_effects(previous_queued_root_effects);
    }
    var result = fn == null ? void 0 : fn();
    flush_tasks();
    if (current_queued_root_effects.length > 0 || root_effects.length > 0) {
      flush_sync();
    }
    flush_count = 0;
    return result;
  } finally {
    current_scheduler_mode = previous_scheduler_mode;
    current_queued_root_effects = previous_queued_root_effects;
  }
}
async function tick() {
  await Promise.resolve();
  flush_sync();
}
function get(signal) {
  const flags = signal.f;
  if ((flags & DESTROYED) !== 0) {
    return signal.v;
  }
  if (is_signals_recorded) {
    captured_signals.add(signal);
  }
  if (current_reaction !== null) {
    const unowned = (current_reaction.f & UNOWNED) !== 0;
    const dependencies = current_reaction.deps;
    if (current_dependencies === null && dependencies !== null && dependencies[current_dependencies_index] === signal && !(unowned && current_effect !== null)) {
      current_dependencies_index++;
    } else if (dependencies === null || current_dependencies_index === 0 || dependencies[current_dependencies_index - 1] !== signal) {
      if (current_dependencies === null) {
        current_dependencies = [signal];
      } else if (current_dependencies[current_dependencies.length - 1] !== signal) {
        current_dependencies.push(signal);
      }
    }
    if (current_untracked_writes !== null && current_effect !== null && (current_effect.f & CLEAN) !== 0 && (current_effect.f & BRANCH_EFFECT) === 0 && current_untracked_writes.includes(signal)) {
      set_signal_status(current_effect, DIRTY);
      schedule_effect(current_effect);
    }
  }
  if ((flags & DERIVED) !== 0 && check_dirtiness(
    /** @type {import('#client').Derived} */
    signal
  )) {
    update_derived(
      /** @type {import('#client').Derived} **/
      signal
    );
  }
  return signal.v;
}
function invalidate_inner_signals(fn) {
  var previous_is_signals_recorded = is_signals_recorded;
  var previous_captured_signals = captured_signals;
  is_signals_recorded = true;
  captured_signals = /* @__PURE__ */ new Set();
  var captured = captured_signals;
  var signal;
  try {
    untrack(fn);
  } finally {
    is_signals_recorded = previous_is_signals_recorded;
    if (is_signals_recorded) {
      for (signal of captured_signals) {
        previous_captured_signals.add(signal);
      }
    }
    captured_signals = previous_captured_signals;
  }
  for (signal of captured) {
    if ((signal.f & LEGACY_DERIVED_PROP) !== 0) {
      for (
        const dep of
        /** @type {import('#client').Derived} */
        signal.deps || []
      ) {
        if ((dep.f & DERIVED) === 0) {
          mutate(
            dep,
            null
            /* doesnt matter */
          );
        }
      }
    } else {
      mutate(
        signal,
        null
        /* doesnt matter */
      );
    }
  }
}
function mark_reactions(signal, to_status, force_schedule) {
  var reactions = signal.reactions;
  if (reactions === null) return;
  var runes = is_runes();
  var length = reactions.length;
  for (var i = 0; i < length; i++) {
    var reaction = reactions[i];
    var flags = reaction.f;
    if (DEV && (flags & INSPECT_EFFECT) !== 0) {
      inspect_effects.add(reaction);
      continue;
    }
    if ((flags & DIRTY) !== 0 || (!force_schedule || !runes) && reaction === current_effect) {
      continue;
    }
    set_signal_status(reaction, to_status);
    var maybe_dirty = (flags & MAYBE_DIRTY) !== 0;
    var unowned = (flags & UNOWNED) !== 0;
    if ((flags & CLEAN) !== 0 || maybe_dirty && unowned) {
      if ((reaction.f & DERIVED) !== 0) {
        mark_reactions(
          /** @type {import('#client').Derived} */
          reaction,
          MAYBE_DIRTY,
          force_schedule
        );
      } else {
        schedule_effect(
          /** @type {import('#client').Effect} */
          reaction
        );
      }
    }
  }
}
function untrack(fn) {
  const previous_reaction = current_reaction;
  try {
    current_reaction = null;
    return fn();
  } finally {
    current_reaction = previous_reaction;
  }
}
var STATUS_MASK = ~(DIRTY | MAYBE_DIRTY | CLEAN);
function set_signal_status(signal, status) {
  signal.f = signal.f & STATUS_MASK | status;
}
function is_signal(val) {
  return typeof val === "object" && val !== null && typeof /** @type {import('#client').Value<V>} */
  val.f === "number";
}
function getContext(key) {
  const context_map = get_or_init_context_map("getContext");
  const result = (
    /** @type {T} */
    context_map.get(key)
  );
  if (DEV) {
    const fn = (
      /** @type {import('#client').ComponentContext} */
      current_component_context.function
    );
    if (fn) {
      add_owner(result, fn, true);
    }
  }
  return result;
}
function setContext(key, context) {
  const context_map = get_or_init_context_map("setContext");
  context_map.set(key, context);
  return context;
}
function hasContext(key) {
  const context_map = get_or_init_context_map("hasContext");
  return context_map.has(key);
}
function getAllContexts() {
  const context_map = get_or_init_context_map("getAllContexts");
  if (DEV) {
    const fn = current_component_context == null ? void 0 : current_component_context.function;
    if (fn) {
      for (const value of context_map.values()) {
        add_owner(value, fn, true);
      }
    }
  }
  return (
    /** @type {T} */
    context_map
  );
}
function get_or_init_context_map(name) {
  if (current_component_context === null) {
    lifecycle_outside_component(name);
  }
  return current_component_context.c ?? (current_component_context.c = new Map(
    get_parent_context(current_component_context) || void 0
  ));
}
function get_parent_context(component_context) {
  let parent = component_context.p;
  while (parent !== null) {
    const context_map = parent.c;
    if (context_map !== null) {
      return context_map;
    }
    parent = parent.p;
  }
  return null;
}
function update(signal, d = 1) {
  var value = +get(signal);
  set(signal, value + d);
  return value;
}
function update_pre(signal, d = 1) {
  return set(signal, +get(signal) + d);
}
function exclude_from_object(obj, keys) {
  obj = { ...obj };
  let key;
  for (key of keys) {
    delete obj[key];
  }
  return obj;
}
function value_or_fallback(value, fallback) {
  return value === void 0 ? fallback() : value;
}
async function value_or_fallback_async(value, fallback) {
  return value === void 0 ? fallback() : value;
}
function push(props, runes = false, fn) {
  current_component_context = {
    p: current_component_context,
    c: null,
    e: null,
    m: false,
    s: props,
    x: null,
    l: null
  };
  if (!runes) {
    current_component_context.l = {
      s: null,
      u: null,
      r1: [],
      r2: source(false)
    };
  }
  if (DEV) {
    current_component_context.function = fn;
    dev_current_component_function = fn;
  }
}
function pop(component) {
  var _a;
  const context_stack_item = current_component_context;
  if (context_stack_item !== null) {
    if (component !== void 0) {
      context_stack_item.x = component;
    }
    const effects = context_stack_item.e;
    if (effects !== null) {
      context_stack_item.e = null;
      for (var i = 0; i < effects.length; i++) {
        effect(effects[i]);
      }
    }
    current_component_context = context_stack_item.p;
    if (DEV) {
      dev_current_component_function = ((_a = context_stack_item.p) == null ? void 0 : _a.function) ?? null;
    }
    context_stack_item.m = true;
  }
  return component || /** @type {T} */
  {};
}
function deep_read_state(value) {
  if (typeof value !== "object" || !value || value instanceof EventTarget) {
    return;
  }
  if (STATE_SYMBOL in value) {
    deep_read(value);
  } else if (!Array.isArray(value)) {
    for (let key in value) {
      const prop = value[key];
      if (typeof prop === "object" && prop && STATE_SYMBOL in prop) {
        deep_read(prop);
      }
    }
  }
}
function deep_read(value, visited = /* @__PURE__ */ new Set()) {
  if (typeof value === "object" && value !== null && // We don't want to traverse DOM elements
  !(value instanceof EventTarget) && !visited.has(value)) {
    visited.add(value);
    if (value instanceof Date) {
      value.getTime();
    }
    for (let key in value) {
      try {
        deep_read(value[key], visited);
      } catch (e) {
      }
    }
    const proto = get_prototype_of(value);
    if (proto !== Object.prototype && proto !== Array.prototype && proto !== Map.prototype && proto !== Set.prototype && proto !== Date.prototype) {
      const descriptors = get_descriptors(proto);
      for (let key in descriptors) {
        const get2 = descriptors[key].get;
        if (get2) {
          try {
            get2.call(value);
          } catch (e) {
          }
        }
      }
    }
  }
}
function unwrap2(value) {
  if (is_signal(value)) {
    return get(value);
  }
  return value;
}
if (DEV) {
  let throw_rune_error = function(rune) {
    if (!(rune in globalThis)) {
      let value;
      Object.defineProperty(globalThis, rune, {
        configurable: true,
        // eslint-disable-next-line getter-return
        get: () => {
          if (value !== void 0) {
            return value;
          }
          rune_outside_svelte(rune);
        },
        set: (v) => {
          value = v;
        }
      });
    }
  };
  throw_rune_error("$state");
  throw_rune_error("$effect");
  throw_rune_error("$derived");
  throw_rune_error("$inspect");
  throw_rune_error("$props");
  throw_rune_error("$bindable");
}
function freeze(value) {
  if (typeof value === "object" && value != null && !is_frozen(value) && !(STATE_FROZEN_SYMBOL in value)) {
    if (STATE_SYMBOL in value) {
      value = snapshot(value);
    }
    define_property(value, STATE_FROZEN_SYMBOL, {
      value: true,
      writable: true,
      enumerable: false
    });
    if (DEV) {
      object_freeze(value);
    }
  }
  return value;
}

// node_modules/.pnpm/svelte@5.0.0-next.164/node_modules/svelte/src/internal/client/dom/reconciler.js
function create_fragment_from_html(html) {
  var elem = document.createElement("template");
  elem.innerHTML = html;
  return elem.content;
}
function remove(current) {
  if (is_array(current)) {
    for (var i = 0; i < current.length; i++) {
      var node = current[i];
      if (node.isConnected) {
        node.remove();
      }
    }
  } else if (current.isConnected) {
    current.remove();
  }
}

// node_modules/.pnpm/svelte@5.0.0-next.164/node_modules/svelte/src/internal/client/reactivity/effects.js
function validate_effect(rune) {
  if (current_effect === null && current_reaction === null) {
    effect_orphan(rune);
  }
  if (current_reaction !== null && (current_reaction.f & UNOWNED) !== 0) {
    effect_in_unowned_derived();
  }
  if (is_destroying_effect) {
    effect_in_teardown(rune);
  }
}
function push_effect(effect2, parent_effect) {
  var parent_last = parent_effect.last;
  if (parent_last === null) {
    parent_effect.last = parent_effect.first = effect2;
  } else {
    parent_last.next = effect2;
    effect2.prev = parent_last;
    parent_effect.last = effect2;
  }
}
function create_effect(type, fn, sync) {
  var is_root = (type & ROOT_EFFECT) !== 0;
  var effect2 = {
    ctx: current_component_context,
    deps: null,
    dom: null,
    f: type | DIRTY,
    first: null,
    fn,
    last: null,
    next: null,
    parent: is_root ? null : current_effect,
    prev: null,
    teardown: null,
    transitions: null
  };
  if (DEV) {
    effect2.component_function = dev_current_component_function;
  }
  if (sync) {
    var previously_flushing_effect = is_flushing_effect;
    try {
      set_is_flushing_effect(true);
      execute_effect(effect2);
      effect2.f |= EFFECT_RAN;
    } finally {
      set_is_flushing_effect(previously_flushing_effect);
    }
  } else if (fn !== null) {
    schedule_effect(effect2);
  }
  var inert = sync && effect2.deps === null && effect2.first === null && effect2.dom === null && effect2.teardown === null;
  if (!inert && !is_root) {
    if (current_effect !== null) {
      push_effect(effect2, current_effect);
    }
    if (current_reaction !== null && (current_reaction.f & DERIVED) !== 0) {
      push_effect(effect2, current_reaction);
    }
  }
  return effect2;
}
function effect_tracking() {
  if (current_reaction === null) {
    return false;
  }
  return (current_reaction.f & UNOWNED) === 0;
}
function teardown(fn) {
  const effect2 = create_effect(RENDER_EFFECT, null, false);
  set_signal_status(effect2, CLEAN);
  effect2.teardown = fn;
  return effect2;
}
function user_effect(fn) {
  validate_effect("$effect");
  var defer = current_effect !== null && (current_effect.f & RENDER_EFFECT) !== 0 && // TODO do we actually need this? removing them changes nothing
  current_component_context !== null && !current_component_context.m;
  if (DEV) {
    define_property(fn, "name", {
      value: "$effect"
    });
  }
  if (defer) {
    var context = (
      /** @type {import('#client').ComponentContext} */
      current_component_context
    );
    (context.e ?? (context.e = [])).push(fn);
  } else {
    var signal = effect(fn);
    return signal;
  }
}
function user_pre_effect(fn) {
  validate_effect("$effect.pre");
  if (DEV) {
    define_property(fn, "name", {
      value: "$effect.pre"
    });
  }
  return render_effect(fn);
}
function inspect_effect(fn) {
  return create_effect(INSPECT_EFFECT, fn, true);
}
function effect_root(fn) {
  const effect2 = create_effect(ROOT_EFFECT, fn, true);
  return () => {
    destroy_effect(effect2);
  };
}
function effect(fn) {
  return create_effect(EFFECT, fn, false);
}
function legacy_pre_effect(deps, fn) {
  var context = (
    /** @type {import('#client').ComponentContextLegacy} */
    current_component_context
  );
  var token = { effect: null, ran: false };
  context.l.r1.push(token);
  token.effect = render_effect(() => {
    deps();
    if (token.ran) return;
    token.ran = true;
    set(context.l.r2, true);
    untrack(fn);
  });
}
function legacy_pre_effect_reset() {
  var context = (
    /** @type {import('#client').ComponentContextLegacy} */
    current_component_context
  );
  render_effect(() => {
    if (!get(context.l.r2)) return;
    for (var token of context.l.r1) {
      var effect2 = token.effect;
      if (check_dirtiness(effect2)) {
        execute_effect(effect2);
      }
      token.ran = false;
    }
    context.l.r2.v = false;
  });
}
function render_effect(fn) {
  return create_effect(RENDER_EFFECT, fn, true);
}
function template_effect(fn) {
  if (DEV) {
    define_property(fn, "name", {
      value: "{expression}"
    });
  }
  return render_effect(fn);
}
function block(fn, flags = 0) {
  return create_effect(RENDER_EFFECT | BLOCK_EFFECT | flags, fn, true);
}
function branch(fn) {
  return create_effect(RENDER_EFFECT | BRANCH_EFFECT, fn, true);
}
function execute_effect_teardown(effect2) {
  var teardown2 = effect2.teardown;
  if (teardown2 !== null) {
    const previously_destroying_effect = is_destroying_effect;
    const previous_reaction = current_reaction;
    set_is_destroying_effect(true);
    set_current_reaction(null);
    try {
      teardown2.call(null);
    } finally {
      set_is_destroying_effect(previously_destroying_effect);
      set_current_reaction(previous_reaction);
    }
  }
}
function destroy_effect(effect2, remove_dom = true) {
  var dom = effect2.dom;
  if (dom !== null && remove_dom) {
    remove(dom);
  }
  destroy_effect_children(effect2, remove_dom);
  remove_reactions(effect2, 0);
  set_signal_status(effect2, DESTROYED);
  if (effect2.transitions) {
    for (const transition of effect2.transitions) {
      transition.stop();
    }
  }
  execute_effect_teardown(effect2);
  var parent = effect2.parent;
  if (parent !== null && (effect2.f & BRANCH_EFFECT) !== 0 && parent.first !== null) {
    unlink_effect(effect2);
  }
  effect2.next = effect2.prev = effect2.teardown = effect2.ctx = effect2.dom = effect2.deps = effect2.parent = effect2.fn = null;
}
function unlink_effect(effect2) {
  var parent = effect2.parent;
  var prev = effect2.prev;
  var next = effect2.next;
  if (prev !== null) prev.next = next;
  if (next !== null) next.prev = prev;
  if (parent !== null) {
    if (parent.first === effect2) parent.first = next;
    if (parent.last === effect2) parent.last = prev;
  }
}
function pause_effect(effect2, callback) {
  var transitions = [];
  pause_children(effect2, transitions, true);
  run_out_transitions(transitions, () => {
    destroy_effect(effect2);
    if (callback) callback();
  });
}
function run_out_transitions(transitions, fn) {
  var remaining = transitions.length;
  if (remaining > 0) {
    var check = () => --remaining || fn();
    for (var transition of transitions) {
      transition.out(check);
    }
  } else {
    fn();
  }
}
function pause_children(effect2, transitions, local) {
  if ((effect2.f & INERT) !== 0) return;
  effect2.f ^= INERT;
  if (effect2.transitions !== null) {
    for (const transition of effect2.transitions) {
      if (transition.is_global || local) {
        transitions.push(transition);
      }
    }
  }
  var child = effect2.first;
  while (child !== null) {
    var sibling = child.next;
    var transparent = (child.f & EFFECT_TRANSPARENT) !== 0 || (child.f & BRANCH_EFFECT) !== 0;
    pause_children(child, transitions, transparent ? local : false);
    child = sibling;
  }
}
function resume_effect(effect2) {
  resume_children(effect2, true);
}
function resume_children(effect2, local) {
  if ((effect2.f & INERT) === 0) return;
  effect2.f ^= INERT;
  if (check_dirtiness(effect2)) {
    execute_effect(effect2);
  }
  var child = effect2.first;
  while (child !== null) {
    var sibling = child.next;
    var transparent = (child.f & EFFECT_TRANSPARENT) !== 0 || (child.f & BRANCH_EFFECT) !== 0;
    resume_children(child, transparent ? local : false);
    child = sibling;
  }
  if (effect2.transitions !== null) {
    for (const transition of effect2.transitions) {
      if (transition.is_global || local) {
        transition.in();
      }
    }
  }
}

// node_modules/.pnpm/svelte@5.0.0-next.164/node_modules/svelte/src/internal/client/warnings.js
var bold = "font-weight: bold";
var normal = "font-weight: normal";
function hydration_attribute_changed(attribute, html, value) {
  if (DEV) {
    console.warn(`%c[svelte] hydration_attribute_changed
%cThe \`${attribute}\` attribute on \`${html}\` changed its value between server and client renders. The client value, \`${value}\`, will be ignored in favour of the server value`, bold, normal);
  } else {
    console.warn("hydration_attribute_changed");
  }
}
function hydration_mismatch(location) {
  if (DEV) {
    console.warn(`%c[svelte] hydration_mismatch
%c${location ? `Hydration failed because the initial UI does not match what was rendered on the server. The error occurred near ${location}` : "Hydration failed because the initial UI does not match what was rendered on the server"}`, bold, normal);
  } else {
    console.warn("hydration_mismatch");
  }
}
function lifecycle_double_unmount() {
  if (DEV) {
    console.warn(`%c[svelte] lifecycle_double_unmount
%cTried to unmount a component that was not mounted`, bold, normal);
  } else {
    console.warn("lifecycle_double_unmount");
  }
}
function ownership_invalid_binding(parent, child, owner) {
  if (DEV) {
    console.warn(`%c[svelte] ownership_invalid_binding
%c${parent} passed a value to ${child} with \`bind:\`, but the value is owned by ${owner}. Consider creating a binding between ${owner} and ${parent}`, bold, normal);
  } else {
    console.warn("ownership_invalid_binding");
  }
}
function ownership_invalid_mutation(component, owner) {
  if (DEV) {
    console.warn(`%c[svelte] ownership_invalid_mutation
%c${component ? `${component} mutated a value owned by ${owner}. This is strongly discouraged. Consider passing values to child components with \`bind:\`, or use a callback instead` : "Mutating a value outside the component that created it is strongly discouraged. Consider passing values to child components with `bind:`, or use a callback instead"}`, bold, normal);
  } else {
    console.warn("ownership_invalid_mutation");
  }
}
function state_proxy_equality_mismatch(operator) {
  if (DEV) {
    console.warn(`%c[svelte] state_proxy_equality_mismatch
%cReactive \`$state(...)\` proxies and the values they proxy have different identities. Because of this, comparisons with \`${operator}\` will produce unexpected results. Consider using \`$state.is(a, b)\` instead`, bold, normal);
  } else {
    console.warn("state_proxy_equality_mismatch");
  }
}

// node_modules/.pnpm/svelte@5.0.0-next.164/node_modules/svelte/src/internal/client/dev/ownership.js
var boundaries = {};
var chrome_pattern = /at (?:.+ \()?(.+):(\d+):(\d+)\)?$/;
var firefox_pattern = /@(.+):(\d+):(\d+)$/;
function get_stack() {
  const stack = new Error().stack;
  if (!stack) return null;
  const entries = [];
  for (const line of stack.split("\n")) {
    let match = chrome_pattern.exec(line) ?? firefox_pattern.exec(line);
    if (match) {
      entries.push({
        file: match[1],
        line: +match[2],
        column: +match[3]
      });
    }
  }
  return entries;
}
function get_component() {
  var _a;
  const stack = (_a = get_stack()) == null ? void 0 : _a.slice(4);
  if (!stack) return null;
  for (let i = 0; i < stack.length; i++) {
    const entry = stack[i];
    const modules = boundaries[entry.file];
    if (!modules) {
      if (i === 0) return null;
      continue;
    }
    for (const module of modules) {
      if (module.start.line < entry.line && module.end.line > entry.line) {
        return module.component;
      }
    }
  }
  return null;
}
var ADD_OWNER = Symbol("ADD_OWNER");
function mark_module_start() {
  var _a, _b;
  const start = (_a = get_stack()) == null ? void 0 : _a[2];
  if (start) {
    (boundaries[_b = start.file] ?? (boundaries[_b] = [])).push({
      start,
      // @ts-expect-error
      end: null,
      // @ts-expect-error we add the component at the end, since HMR will overwrite the function
      component: null
    });
  }
}
function mark_module_end(component) {
  var _a;
  const end = (_a = get_stack()) == null ? void 0 : _a[2];
  if (end) {
    const boundaries_file = boundaries[end.file];
    const boundary = boundaries_file[boundaries_file.length - 1];
    boundary.end = end;
    boundary.component = component;
  }
}
function add_owner(object, owner, global = false) {
  if (object && !global) {
    const component = dev_current_component_function;
    const metadata = object[STATE_SYMBOL];
    if (metadata && !has_owner(metadata, component)) {
      let original = get_owner(metadata);
      if (owner.filename !== component.filename) {
        ownership_invalid_binding(component.filename, owner.filename, original.filename);
      }
    }
  }
  add_owner_to_object(object, owner, /* @__PURE__ */ new Set());
}
function add_owner_effect(get_object, Component) {
  user_pre_effect(() => {
    add_owner(get_object(), Component);
  });
}
function widen_ownership(from, to) {
  if (to.owners === null) {
    return;
  }
  while (from) {
    if (from.owners === null) {
      to.owners = null;
      break;
    }
    for (const owner of from.owners) {
      to.owners.add(owner);
    }
    from = from.parent;
  }
}
function add_owner_to_object(object, owner, seen) {
  const metadata = (
    /** @type {import('#client').ProxyMetadata} */
    object == null ? void 0 : object[STATE_SYMBOL]
  );
  if (metadata) {
    if (metadata.owners !== null) {
      metadata.owners.add(owner);
    }
  } else if (object && typeof object === "object") {
    if (seen.has(object)) return;
    seen.add(object);
    if (object[ADD_OWNER]) {
      render_effect(() => {
        object[ADD_OWNER](owner);
      });
    } else {
      var proto = get_prototype_of(object);
      if (proto === Object.prototype) {
        for (const key in object) {
          add_owner_to_object(object[key], owner, seen);
        }
      } else if (proto === Array.prototype) {
        for (let i = 0; i < object.length; i += 1) {
          add_owner_to_object(object[i], owner, seen);
        }
      }
    }
  }
}
function has_owner(metadata, component) {
  if (metadata.owners === null) {
    return true;
  }
  return metadata.owners.has(component) || metadata.parent !== null && has_owner(metadata.parent, component);
}
function get_owner(metadata) {
  var _a;
  return ((_a = metadata == null ? void 0 : metadata.owners) == null ? void 0 : _a.values().next().value) ?? get_owner(
    /** @type {import('#client').ProxyMetadata} */
    metadata.parent
  );
}
function check_ownership(metadata) {
  const component = get_component();
  if (component && !has_owner(metadata, component)) {
    let original = get_owner(metadata);
    if (original.filename !== component.filename) {
      ownership_invalid_mutation(component.filename, original.filename);
    } else {
      ownership_invalid_mutation();
    }
  }
}

// node_modules/.pnpm/svelte@5.0.0-next.164/node_modules/svelte/src/compiler/phases/1-parse/utils/names.js
var void_element_names = [
  "area",
  "base",
  "br",
  "col",
  "command",
  "embed",
  "hr",
  "img",
  "input",
  "keygen",
  "link",
  "meta",
  "param",
  "source",
  "track",
  "wbr"
];
function is_void(name) {
  return void_element_names.includes(name) || name.toLowerCase() === "!doctype";
}

// node_modules/.pnpm/svelte@5.0.0-next.164/node_modules/svelte/src/internal/shared/warnings.js
var bold2 = "font-weight: bold";
var normal2 = "font-weight: normal";
function dynamic_void_element_content(tag) {
  if (DEV) {
    console.warn(`%c[svelte] dynamic_void_element_content
%c\`<svelte:element this="${tag}">\` is a void element — it cannot have content`, bold2, normal2);
  } else {
    console.warn("dynamic_void_element_content");
  }
}

// node_modules/.pnpm/svelte@5.0.0-next.164/node_modules/svelte/src/internal/shared/validate.js
var snippet_symbol = Symbol.for("svelte.snippet");
function add_snippet_symbol(fn) {
  fn[snippet_symbol] = true;
  return fn;
}
function validate_snippet(snippet_fn) {
  if (snippet_fn && snippet_fn[snippet_symbol] !== true) {
    render_tag_invalid_argument();
  }
  return snippet_fn;
}
function validate_component(component_fn) {
  if ((component_fn == null ? void 0 : component_fn[snippet_symbol]) === true) {
    snippet_used_as_component();
  }
  return component_fn;
}
function validate_void_dynamic_element(tag_fn) {
  const tag = tag_fn();
  if (tag && is_void(tag)) {
    dynamic_void_element_content(tag);
  }
}
function validate_dynamic_element_tag(tag_fn) {
  const tag = tag_fn();
  const is_string = typeof tag === "string";
  if (tag && !is_string) {
    svelte_element_invalid_this_value();
  }
}
function validate_store(store, name) {
  if (store != null && typeof store.subscribe !== "function") {
    store_invalid_shape(name);
  }
}

export {
  EACH_ITEM_REACTIVE,
  EACH_INDEX_REACTIVE,
  EACH_KEYED,
  EACH_IS_CONTROLLED,
  EACH_IS_ANIMATED,
  EACH_IS_STRICT_EQUALS,
  PROPS_IS_IMMUTABLE,
  PROPS_IS_RUNES,
  PROPS_IS_UPDATED,
  PROPS_IS_LAZY_INITIAL,
  TRANSITION_IN,
  TRANSITION_OUT,
  TRANSITION_GLOBAL,
  TEMPLATE_FRAGMENT,
  TEMPLATE_USE_IMPORT_NODE,
  HYDRATION_START,
  HYDRATION_END,
  HYDRATION_ANCHOR,
  HYDRATION_END_ELSE,
  HYDRATION_ERROR,
  ELEMENT_IS_NAMESPACED,
  ELEMENT_PRESERVE_ATTRIBUTE_CASE,
  UNINITIALIZED,
  RawTextElements,
  DelegatedEvents,
  PassiveDelegatedEvents,
  AttributeAliases,
  DOMBooleanAttributes,
  namespace_svg,
  interactive_elements,
  disallowed_paragraph_contents,
  is_tag_valid_with_parent,
  is_capture_event,
  hydration_attribute_changed,
  hydration_mismatch,
  lifecycle_double_unmount,
  state_proxy_equality_mismatch,
  is_array,
  array_from,
  object_keys,
  is_frozen,
  define_property,
  get_descriptor,
  get_descriptors,
  object_prototype,
  array_prototype,
  get_prototype_of,
  map_set,
  map_get,
  is_function,
  BLOCK_EFFECT,
  INERT,
  EFFECT_RAN,
  EFFECT_TRANSPARENT,
  LEGACY_DERIVED_PROP,
  STATE_SYMBOL,
  LOADING_ATTR_SYMBOL,
  get_component,
  ADD_OWNER,
  mark_module_start,
  mark_module_end,
  add_owner,
  add_owner_effect,
  safe_not_equal,
  safe_equals,
  bind_invalid_checkbox_value,
  bind_invalid_export,
  bind_not_bindable,
  component_api_changed,
  component_api_invalid_new,
  each_key_duplicate,
  hydration_failed,
  lifecycle_legacy_only,
  props_invalid_value,
  props_rest_readonly,
  svelte_component_invalid_this_value,
  source,
  mutable_source,
  mutate,
  set,
  proxy,
  snapshot,
  get_proxied_value,
  is,
  queue_micro_task,
  queue_idle_task,
  derived,
  derived_safe_equal,
  lifecycle_outside_component,
  set_current_reaction,
  current_effect,
  set_current_effect,
  is_signals_recorded,
  current_component_context,
  set_current_component_context,
  dev_current_component_function,
  set_dev_current_component_function,
  flush_sync,
  tick,
  get,
  invalidate_inner_signals,
  untrack,
  getContext,
  setContext,
  hasContext,
  getAllContexts,
  update,
  update_pre,
  exclude_from_object,
  value_or_fallback,
  value_or_fallback_async,
  push,
  pop,
  deep_read_state,
  deep_read,
  unwrap2 as unwrap,
  freeze,
  create_fragment_from_html,
  remove,
  validate_effect,
  effect_tracking,
  teardown,
  user_effect,
  user_pre_effect,
  inspect_effect,
  effect_root,
  effect,
  legacy_pre_effect,
  legacy_pre_effect_reset,
  render_effect,
  template_effect,
  block,
  branch,
  destroy_effect,
  pause_effect,
  run_out_transitions,
  pause_children,
  resume_effect,
  add_snippet_symbol,
  validate_snippet,
  validate_component,
  validate_void_dynamic_element,
  validate_dynamic_element_tag,
  validate_store
};
//# sourceMappingURL=chunk-LHNPR6KV.js.map
