import {
  derived,
  get_store_value,
  writable
} from "./chunk-2UHEHA4X.js";
import "./chunk-VZP3UMKG.js";
import {
  onMount
} from "./chunk-MBREYQLP.js";
import {
  add_locations,
  append,
  check_target,
  hmr,
  html,
  if_block,
  init,
  legacy_api,
  prop,
  set_attribute,
  template
} from "./chunk-P4W4JZRS.js";
import {
  first_child,
  head,
  sibling
} from "./chunk-N3B3MM6Z.js";
import "./chunk-VUYJKMMQ.js";
import "./chunk-KX2HYWOZ.js";
import {
  mark_module_end,
  mark_module_start,
  pop,
  push,
  set,
  source,
  template_effect
} from "./chunk-LHNPR6KV.js";
import "./chunk-PLGELRID.js";
import "./chunk-LVJITFQB.js";
import "./chunk-YAAWISDD.js";
import "./chunk-DWA4UIM3.js";

// node_modules/.pnpm/mode-watcher@0.3.1_svelte@5.0.0-next.164/node_modules/mode-watcher/dist/without-transition.js
var timeoutAction;
var timeoutEnable;
function withoutTransition(action) {
  if (typeof document === "undefined")
    return;
  clearTimeout(timeoutAction);
  clearTimeout(timeoutEnable);
  const style = document.createElement("style");
  const css = document.createTextNode(`* {
     -webkit-transition: none !important;
     -moz-transition: none !important;
     -o-transition: none !important;
     -ms-transition: none !important;
     transition: none !important;
  }`);
  style.appendChild(css);
  const disable = () => document.head.appendChild(style);
  const enable = () => document.head.removeChild(style);
  if (typeof window.getComputedStyle !== "undefined") {
    disable();
    action();
    window.getComputedStyle(style).opacity;
    enable();
    return;
  }
  if (typeof window.requestAnimationFrame !== "undefined") {
    disable();
    action();
    window.requestAnimationFrame(enable);
    return;
  }
  disable();
  timeoutAction = window.setTimeout(() => {
    action();
    timeoutEnable = window.setTimeout(enable, 120);
  }, 120);
}

// node_modules/.pnpm/mode-watcher@0.3.1_svelte@5.0.0-next.164/node_modules/mode-watcher/dist/stores.js
var noopStorage = {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  getItem: (_key) => null,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  setItem: (_key, _value) => {
  }
};
var isBrowser = typeof document !== "undefined";
var modes = ["dark", "light", "system"];
var localStorageKey = "mode-watcher-mode";
var userPrefersMode = createUserPrefersMode();
var systemPrefersMode = createSystemMode();
var themeColors = writable(void 0);
var disableTransitions = writable(true);
var derivedMode = createDerivedMode();
function createUserPrefersMode() {
  const defaultValue = "system";
  const storage = isBrowser ? localStorage : noopStorage;
  const initialValue = storage.getItem(localStorageKey);
  let value = isValidMode(initialValue) ? initialValue : defaultValue;
  const { subscribe, set: _set } = writable(value, () => {
    if (!isBrowser)
      return;
    const handler = (e) => {
      if (e.key !== localStorageKey)
        return;
      const newValue = e.newValue;
      if (isValidMode(newValue)) {
        _set(value = newValue);
      } else {
        _set(value = defaultValue);
      }
    };
    addEventListener("storage", handler);
    return () => removeEventListener("storage", handler);
  });
  function set2(v) {
    _set(value = v);
    storage.setItem(localStorageKey, value);
  }
  return {
    subscribe,
    set: set2
  };
}
function createSystemMode() {
  const defaultValue = void 0;
  let track = true;
  const { subscribe, set: set2 } = writable(defaultValue, () => {
    if (!isBrowser)
      return;
    const handler = (e) => {
      if (!track)
        return;
      set2(e.matches ? "light" : "dark");
    };
    const mediaQueryState = window.matchMedia("(prefers-color-scheme: light)");
    mediaQueryState.addEventListener("change", handler);
    return () => mediaQueryState.removeEventListener("change", handler);
  });
  function query() {
    if (!isBrowser)
      return;
    const mediaQueryState = window.matchMedia("(prefers-color-scheme: light)");
    set2(mediaQueryState.matches ? "light" : "dark");
  }
  function tracking(active) {
    track = active;
  }
  return {
    subscribe,
    query,
    tracking
  };
}
function createDerivedMode() {
  const { subscribe } = derived([userPrefersMode, systemPrefersMode, themeColors, disableTransitions], ([$userPrefersMode, $systemPrefersMode, $themeColors, $disableTransitions]) => {
    if (!isBrowser)
      return void 0;
    const derivedMode2 = $userPrefersMode === "system" ? $systemPrefersMode : $userPrefersMode;
    function update() {
      const htmlEl = document.documentElement;
      const themeColorEl = document.querySelector('meta[name="theme-color"]');
      if (derivedMode2 === "light") {
        htmlEl.classList.remove("dark");
        htmlEl.style.colorScheme = "light";
        if (themeColorEl && $themeColors) {
          themeColorEl.setAttribute("content", $themeColors.light);
        }
      } else {
        htmlEl.classList.add("dark");
        htmlEl.style.colorScheme = "dark";
        if (themeColorEl && $themeColors) {
          themeColorEl.setAttribute("content", $themeColors.dark);
        }
      }
    }
    if ($disableTransitions) {
      withoutTransition(update);
    } else {
      update();
    }
    return derivedMode2;
  });
  return {
    subscribe
  };
}
function isValidMode(value) {
  if (typeof value !== "string")
    return false;
  return modes.includes(value);
}

// node_modules/.pnpm/mode-watcher@0.3.1_svelte@5.0.0-next.164/node_modules/mode-watcher/dist/mode.js
function toggleMode() {
  userPrefersMode.set(get_store_value(derivedMode) === "dark" ? "light" : "dark");
}
function setMode(mode) {
  userPrefersMode.set(mode);
}
function resetMode() {
  userPrefersMode.set("system");
}
function setInitialMode(defaultMode, themeColors2) {
  const rootEl = document.documentElement;
  const mode = localStorage.getItem("mode-watcher-mode") || defaultMode;
  const light = mode === "light" || mode === "system" && window.matchMedia("(prefers-color-scheme: light)").matches;
  rootEl.classList[light ? "remove" : "add"]("dark");
  rootEl.style.colorScheme = light ? "light" : "dark";
  if (themeColors2) {
    const themeMetaEl = document.querySelector('meta[name="theme-color"]');
    if (themeMetaEl) {
      themeMetaEl.setAttribute("content", mode === "light" ? themeColors2.light : themeColors2.dark);
    }
  }
  localStorage.setItem("mode-watcher-mode", mode);
}

// node_modules/.pnpm/mode-watcher@0.3.1_svelte@5.0.0-next.164/node_modules/mode-watcher/dist/mode-watcher.svelte
mark_module_start();
Mode_watcher.filename = "node_modules/.pnpm/mode-watcher@0.3.1_svelte@5.0.0-next.164/node_modules/mode-watcher/dist/mode-watcher.svelte";
var root_2 = add_locations(template(`<meta name="theme-color">`), Mode_watcher.filename, [[37, 2]]);
var root_1 = add_locations(template(`<!> <!>`, 1), Mode_watcher.filename, []);
function Mode_watcher($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Mode_watcher);
  let track = prop($$props, "track", 0, true);
  let defaultMode = prop($$props, "defaultMode", 0, "system");
  let themeColors2 = prop($$props, "themeColors", 8, () => void 0);
  let disableTransitions2 = prop($$props, "disableTransitions", 0, true);
  themeColors.set(themeColors2());
  disableTransitions.set(disableTransitions2());
  onMount(() => {
    const unsubscriber = derivedMode.subscribe(() => {
    });
    systemPrefersMode.tracking(track());
    systemPrefersMode.query();
    const localStorageMode = localStorage.getItem(localStorageKey);
    setMode(isValidMode(localStorageMode) ? localStorageMode : defaultMode());
    return () => {
      unsubscriber();
    };
  });
  const args = `"${defaultMode()}"${themeColors2() ? `, ${JSON.stringify(themeColors2())}` : ""}`;
  init();
  head(($$anchor2) => {
    var fragment = root_1();
    var node = first_child(fragment);
    if_block(node, themeColors2, ($$anchor3) => {
      var meta = root_2();
      template_effect(() => set_attribute(meta, "content", themeColors2().dark));
      append($$anchor3, meta);
    });
    var node_1 = sibling(sibling(node, true));
    html(node_1, () => `<script nonce="%sveltekit.nonce%">(` + setInitialMode.toString() + `)(` + args + `);<\/script>`, false, false);
    append($$anchor2, fragment);
  });
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  const s = source(Mode_watcher);
  const filename = Mode_watcher.filename;
  Mode_watcher = hmr(s);
  Mode_watcher.filename = filename;
  if (import.meta.hot.acceptExports) {
    import.meta.hot.acceptExports(["default"], (module) => {
      set(s, module.default);
    });
  } else {
    import.meta.hot.accept((module) => {
      set(s, module.default);
    });
  }
}
var mode_watcher_default = Mode_watcher;
mark_module_end(Mode_watcher);
export {
  mode_watcher_default as ModeWatcher,
  localStorageKey,
  derivedMode as mode,
  resetMode,
  setMode,
  systemPrefersMode,
  toggleMode,
  userPrefersMode
};
//# sourceMappingURL=mode-watcher.js.map
