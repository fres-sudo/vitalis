import { Callable, type conform, type repeat } from "@arktype/util";
import type { inferRoot } from "./inference.js";
import type { RootSchema } from "./kinds.js";
import type { Root } from "./roots/root.js";
import type { RootScope } from "./scope.js";
import { arkKind } from "./shared/utils.js";
export type GenericNodeInstantiation<params extends string[] = string[], def = unknown, $ = any> = <args>(...args: conform<args, repeat<[RootSchema], params["length"]>>) => Root<inferRoot<def, $ & bindGenericNodeInstantiation<params, $, args>>>;
export type bindGenericNodeInstantiation<params extends string[], $, args> = {
    [i in keyof params & `${number}` as params[i]]: inferRoot<args[i & keyof args], $>;
};
export declare const validateUninstantiatedGenericNode: (g: GenericRoot) => GenericRoot;
export interface GenericProps<params extends string[] = string[], def = any, $ = any> {
    [arkKind]: "generic";
    params: params;
    def: def;
    $: RootScope<$>;
}
export declare class GenericRoot<params extends string[] = string[], def = any, $ = any> extends Callable<GenericNodeInstantiation<params, def, $>> implements GenericProps {
    params: params;
    def: def;
    $: RootScope<$>;
    readonly [arkKind] = "generic";
    constructor(params: params, def: def, $: RootScope<$>);
}
