import type { array, Key } from "@arktype/util";
import type { NodeCompiler } from "../shared/compile.js";
import type { TraverseApply } from "../shared/traversal.js";
import { BaseRoot, type RawRootDeclaration } from "./root.js";
export declare abstract class RawBasis<d extends RawRootDeclaration = RawRootDeclaration> extends BaseRoot<d> {
    abstract compiledCondition: string;
    abstract compiledNegation: string;
    abstract literalKeys: array<Key>;
    rawKeyOf(): BaseRoot;
    traverseApply: TraverseApply<d["prerequisite"]>;
    get errorContext(): d["errorContext"];
    get compiledErrorContext(): string;
    compile(js: NodeCompiler): void;
}
