import { domainDescriptions, domainOf, getBaseDomainKeys } from "@arktype/util";
import { Disjoint } from "../shared/disjoint.js";
import { implementNode } from "../shared/implement.js";
import { RawBasis } from "./basis.js";
export class DomainNode extends RawBasis {
    traverseAllows = data => domainOf(data) === this.domain;
    compiledCondition = this.domain === "object" ?
        `((typeof data === "object" && data !== null) || typeof data === "function")`
        : `typeof data === "${this.domain}"`;
    compiledNegation = this.domain === "object" ?
        `((typeof data !== "object" || data === null) && typeof data !== "function")`
        : `typeof data !== "${this.domain}"`;
    expression = this.domain;
    literalKeys = getBaseDomainKeys(this.domain);
}
export const domainImplementation = implementNode({
    kind: "domain",
    hasAssociatedError: true,
    collapsibleKey: "domain",
    keys: {
        domain: {}
    },
    normalize: schema => typeof schema === "string" ? { domain: schema } : schema,
    defaults: {
        description: node => domainDescriptions[node.domain],
        actual: data => (typeof data === "boolean" ? `${data}` : domainOf(data))
    },
    intersections: {
        domain: (l, r) => Disjoint.from("domain", l, r)
    }
});
