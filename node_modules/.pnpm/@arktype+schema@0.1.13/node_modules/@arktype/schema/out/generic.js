import { Callable } from "@arktype/util";
import { arkKind } from "./shared/utils.js";
export const validateUninstantiatedGenericNode = (g) => {
    g.$.schema(g.def, {
    // // TODO: probably don't need raw once this is fixed.
    // args: flatMorph(g.params, (_, name) => [name, g.$.raw.keywords.unknown])
    });
    return g;
};
export class GenericRoot extends Callable {
    params;
    def;
    $;
    [arkKind] = "generic";
    constructor(params, def, $) {
        super((...args) => {
            args;
            // const argNodes: Record<string, RawRoot> = flatMorph(
            // 	params,
            // 	(i, param) => [param, $.schema(args[i])]
            // ) as never
            // { args: argNodes }
            return $.schema(def);
        });
        this.params = params;
        this.def = def;
        this.$ = $;
    }
}
