import { flatMorph, isArray, isDotAccessible, printable } from "@arktype/util";
export const makeRootAndArrayPropertiesMutable = (o) => 
// TODO: this cast should not be required, but it seems TS is referencing
// the wrong parameters here?
flatMorph(o, (k, v) => [k, isArray(v) ? [...v] : v]);
export const pathToPropString = (path) => {
    const propAccessChain = path.reduce((s, k) => typeof k === "string" && isDotAccessible(k) ?
        `${s}.${k}`
        : `${s}[${printable(k)}]`, "");
    return propAccessChain[0] === "." ? propAccessChain.slice(1) : propAccessChain;
};
export const arkKind = Symbol("ArkTypeInternalKind");
export const hasArkKind = (value, kind) => value?.[arkKind] === kind;
export const isNode = (value) => hasArkKind(value, "root") || hasArkKind(value, "constraint");
// ideally this could be just declared since it is not used at runtime,
// but it doesn't play well with typescript-eslint: https://github.com/typescript-eslint/typescript-eslint/issues/4608
// easiest solution seems to be just having it declared as a value so it doesn't break when we import at runtime
export const inferred = Symbol("inferred");
