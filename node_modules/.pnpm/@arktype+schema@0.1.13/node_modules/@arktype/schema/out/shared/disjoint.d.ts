import { type entryOf } from "@arktype/util";
import type { Node } from "../kinds.js";
import type { BaseNode } from "../node.js";
import type { BaseRoot } from "../roots/root.js";
import type { BoundKind } from "./implement.js";
type DisjointKinds = {
    domain?: {
        l: Node<"domain">;
        r: Node<"domain">;
    };
    unit?: {
        l: Node<"unit">;
        r: Node<"unit">;
    };
    proto?: {
        l: Node<"proto">;
        r: Node<"proto">;
    };
    presence?: {
        l: BaseRoot;
        r: BaseRoot;
    };
    range?: {
        l: Node<BoundKind>;
        r: Node<BoundKind>;
    };
    assignability?: {
        l: BaseNode;
        r: BaseNode;
    };
    union?: {
        l: readonly BaseRoot[];
        r: readonly BaseRoot[];
    };
    indiscriminableMorphs?: {
        l: Node<"union">;
        r: Node<"union">;
    };
    interesectedMorphs?: {
        l: Node<"morph">;
        r: Node<"morph">;
    };
};
export type DisjointKindEntries = entryOf<DisjointKinds>[];
export type SerializedPath = `[${string}]`;
export type DisjointsSources = {
    [k in `${SerializedPath}`]: DisjointsAtPath;
};
export type DisjointsAtPath = {
    [kind in DisjointKind]?: DisjointKinds[kind];
};
export type DisjointSourceEntry = entryOf<DisjointsSources>;
export type DisjointSource = Required<DisjointKinds>[DisjointKind];
export type FlatDisjointEntry = {
    path: SerializedPath;
    kind: DisjointKind;
    disjoint: DisjointSource;
};
export type DisjointKind = keyof DisjointKinds;
export declare class Disjoint {
    sources: DisjointsSources;
    constructor(sources: DisjointsSources);
    clone(): Disjoint;
    static from<kind extends DisjointKind>(kind: kind, l: Required<DisjointKinds>[kind]["l"], r: Required<DisjointKinds>[kind]["r"]): Disjoint;
    static fromEntries(entries: DisjointKindEntries): Disjoint;
    get flat(): FlatDisjointEntry[];
    describeReasons(): string;
    isEmpty(): boolean;
    throw(): never;
    invert(): Disjoint;
    add(input: Disjoint): void;
    withPrefixKey(key: string | symbol): Disjoint;
    toString(): string;
}
export {};
