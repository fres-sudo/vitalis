import { implementNode } from "../shared/implement.js";
import { BaseRange, parseExclusiveKey } from "./range.js";
export const minLengthImplementation = implementNode({
    kind: "minLength",
    collapsibleKey: "rule",
    hasAssociatedError: true,
    keys: {
        rule: {},
        exclusive: parseExclusiveKey
    },
    normalize: schema => typeof schema === "number" ? { rule: schema } : schema,
    defaults: {
        description: node => node.exclusive ?
            node.rule === 0 ?
                "non-empty"
                : `more than length ${node.rule}`
            : node.rule === 1 ? "non-empty"
                : `at least length ${node.rule}`,
        actual: data => `${data.length}`
    },
    intersections: {
        minLength: (l, r) => (l.isStricterThan(r) ? l : r)
    }
});
export class MinLengthNode extends BaseRange {
    impliedBasis = this.$.keywords.lengthBoundable.raw;
    traverseAllows = this.exclusive ?
        data => data.length > this.rule
        : data => data.length >= this.rule;
}
