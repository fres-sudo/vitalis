import { RawPrimitiveConstraint } from "../constraint.js";
import type { BaseRoot } from "../roots/root.js";
import type { BaseMeta, declareNode } from "../shared/declare.js";
import { type nodeImplementationOf } from "../shared/implement.js";
export interface RegexInner extends BaseMeta {
    readonly rule: string;
    readonly flags?: string;
}
export type NormalizedRegexSchema = RegexInner;
export type RegexSchema = NormalizedRegexSchema | string | RegExp;
export interface RegexDeclaration extends declareNode<{
    kind: "regex";
    schema: RegexSchema;
    normalizedSchema: NormalizedRegexSchema;
    inner: RegexInner;
    intersectionIsOpen: true;
    prerequisite: string;
    errorContext: RegexInner;
}> {
}
export declare const regexImplementation: nodeImplementationOf<RegexDeclaration>;
export declare class RegexNode extends RawPrimitiveConstraint<RegexDeclaration> {
    readonly instance: RegExp;
    readonly expression: string;
    traverseAllows: (string: string) => boolean;
    readonly compiledCondition: string;
    readonly compiledNegation: string;
    readonly impliedBasis: BaseRoot;
}
