import { type NormalizedSchema } from "./kinds.js";
import type { BaseNode } from "./node.js";
import type { UnknownRoot } from "./roots/root.js";
import type { RawRootScope } from "./scope.js";
import { type NodeKind } from "./shared/implement.js";
export type NodeParseOptions<prereduced extends boolean = boolean> = {
    alias?: string;
    prereduced?: prereduced;
    /** Instead of creating the node, compute the innerHash of the definition and
     * point it to the specified resolution.
     *
     * Useful for defining reductions like number|string|bigint|symbol|object|true|false|null|undefined => unknown
     **/
    reduceTo?: BaseNode;
};
export interface NodeParseContext<kind extends NodeKind = NodeKind> extends NodeParseOptions {
    $: RawRootScope;
    id: string;
    args?: Record<string, UnknownRoot>;
    schema: NormalizedSchema<kind>;
}
export declare const schemaKindOf: <kind extends "alias" | "union" | "morph" | "unit" | "intersection" | "proto" | "domain" = "alias" | "union" | "morph" | "unit" | "intersection" | "proto" | "domain">(schema: unknown, allowedKinds?: readonly kind[] | undefined) => kind;
export declare const parseNode: (kind: NodeKind, ctx: NodeParseContext) => BaseNode;
