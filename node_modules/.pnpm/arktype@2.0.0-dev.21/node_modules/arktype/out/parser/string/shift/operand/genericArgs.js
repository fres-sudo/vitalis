import { writeUnclosedGroupMessage } from "../../reduce/shared.js";
export const parseGenericArgs = (name, params, s) => _parseGenericArgs(name, params, s, [], []);
const _parseGenericArgs = (name, params, s, argDefs, argNodes) => {
    const argState = s.parseUntilFinalizer();
    // remove the finalizing token from the argDef
    argDefs.push(argState.scanner.scanned.slice(0, -1));
    argNodes.push(argState.root);
    if (argState.finalizer === ">") {
        if (argNodes.length === params.length) {
            return {
                result: argNodes,
                unscanned: argState.scanner.unscanned
            };
        }
        return argState.error(writeInvalidGenericArgsMessage(name, params, argDefs));
    }
    if (argState.finalizer === ",")
        return _parseGenericArgs(name, params, s, argDefs, argNodes);
    return argState.error(writeUnclosedGroupMessage(">"));
};
export const writeInvalidGenericArgsMessage = (name, params, argDefs) => `${name}<${params.join(", ")}> requires exactly ${params.length} args (got ${argDefs.length}${argDefs.length === 0 ? "" : `: ${argDefs.join(", ")}`})`;
