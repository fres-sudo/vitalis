import { type Ark, type ArkErrors, type inferred } from "@arktype/schema";
import type { Generic } from "./generic.js";
import type { MatchParser } from "./match.js";
import type { Module } from "./module.js";
import { type Scope } from "./scope.js";
import type { DeclarationParser, DefinitionParser, TypeParser } from "./type.js";
type TsGenericsExports<$ = Ark> = {
    Record: Generic<[
        "K",
        "V"
    ], {
        "[K]": "V";
    }, $>;
};
export declare const tsGenerics: Module<TsGenericsExports<Ark>>;
export declare const ambient: Scope<Ark>;
export declare const ark: Module<Ark>;
export declare const type: TypeParser<{}>;
export declare namespace type {
    type cast<t> = {
        [inferred]?: t;
    };
    type errors = ArkErrors;
}
export declare const match: MatchParser<{}>;
export declare const define: DefinitionParser<{}>;
export declare const declare: DeclarationParser<{}>;
export {};
