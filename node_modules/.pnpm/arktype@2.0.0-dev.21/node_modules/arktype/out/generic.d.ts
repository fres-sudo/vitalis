import { arkKind, type GenericNodeInstantiation, type GenericProps, type RootScope } from "@arktype/schema";
import { Callable, type conform } from "@arktype/util";
import type { inferDefinition } from "./parser/definition.js";
import type { GenericParamsParseError, parseGenericParams } from "./parser/generic.js";
import type { Type, inferTypeRoot, validateTypeRoot } from "./type.js";
export type validateParameterString<params extends string> = parseGenericParams<params> extends GenericParamsParseError<infer message> ? message : params;
export type GenericTypeInstantiation<params extends string[] = string[], def = any, $ = any> = <args>(...args: conform<args, {
    [i in keyof params]: validateTypeRoot<args[i & keyof args], $>;
}>) => Type<inferDefinition<def, $, bindGenericInstantiation<params, $, args>>, $>;
export type GenericInstantiation<params extends string[] = string[], def = any, $ = any> = GenericTypeInstantiation<params, def, $> & GenericNodeInstantiation<params, def, $>;
type bindGenericInstantiation<params extends string[], $, args> = {
    [i in keyof params & `${number}` as params[i]]: inferTypeRoot<args[i & keyof args], $>;
};
export declare class Generic<params extends string[] = string[], def = unknown, $ = any> extends Callable<GenericInstantiation<params, def, $>> implements GenericProps<params, def, $> {
    params: params;
    def: def;
    $: RootScope<$>;
    readonly [arkKind] = "generic";
    constructor(params: params, def: def, $: RootScope<$>);
}
export {};
